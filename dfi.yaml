# dfi.yaml ---
#
# Description: the model from "Monetary Policy and Speculative Stock Markets"
# Author: Gregor Boehl [mail@gregorboehl.com]
# Last-Updated: 17/11/19
#
declarations:
  name: 'dfi'
  # variables ...
  variables: [Pi, c, y, x, s, dy, r, rn, u, z, vr]

equations:
  model:
    # Phillips Curve
    ~ Pi = beta*Pi(+1) - kappa*x - z

    # Euler Equation
    ~ c = c(+1) - 1/sigma*(r - Pi(+1) + u)

    # ressource constraint
    ~ y = c

    # marginal costs
    ~ x = nu*s - eta*y - (r - Pi(+1) + u)

    # asset market
    ~ s = (1-beta)*y(+1) + beta*s(+1) - (r - Pi(+1) + u)

    # Technology Shock
    ~ z = rho_z * z(-1) + e_z

    # SW-type shock on risk premium
    ~ u = rho_u * u(-1) + e_u 

    # MP Shock
    ~ vr = rho_r*vr(-1) + e_r

    # notational rate
    ~ rn = rho*rn(-1) + (1-rho)*(phi_pi*Pi + phi_y*y) + vr

    # Output Growth
    ~ dy = y - y(-1)

  constraint:
    # the actual constraint in the form r = max(..., x_bar). The constrained variable MUST be at the LHS. Here it is the ZLB. This reads r = max(rn, x_bar), hence the nominal rate is either the notational rate but never smaller than x_bar.
    ~ r = rn
    
  # measurement equations
  observables:
    # Output growth
    GDP : dy + y_mean
    #ygr : y

    # Observed inflation
    Infl : Pi + pi_mean

    # Observed Interest Rate
    FFR : r + 1/beta

calibration:
  parameters:
    beta    : .99
    theta   : .66
    sigma   : 1.5
    phi_pi  : 1.7
    phi_y   : .125
    rho     : .8
    rho_u   : .8
    rho_z   : .9
    rho_r   : .7
    sig_u   : .5
    sig_z   : .3
    sig_r   : .3
    psi     : 0.3
    nub     : 0.1
    y_mean  : 0.35
    pi_mean : 0.5
    elb_level: .07

  parafunc:

    # parameters that are functions of other parameters
    # the following functions are supported by default: exp, log, sqrt, normpdf, normcdf, normppf (=norminv)
    # additionally you can define arbitary functions in a *_funcs.py file. This file must be in the same directory as the *.yaml file and have the same name
    # example: the correponding file to this model ('dfi.yaml') must be called 'dfi_funcs.py'. It here defines the (trivial) function "calc_nu"
    # the *_funcs.py file does not need to be present if you dont' need it

    kappa   : (1-theta)*(1-beta*theta)/theta
    eta     : (sigma + psi + nub)/(1-nub)
    nu      : calc_nu(nub) # calc nu is an external function defined in dfi_funcs.py
    x_bar   : -1/beta + elb_level # x_bar *must* be present either as a parameter or parafunc

  covariances:
    e_z: sig_z
    e_u: sig_u
    e_r: sig_r

estimation:
  prior:
    # Priors are structured as follows:
    # name  : [initval, lb, ub, dist_type, dist_p1, dist_p2]
    # The initial value (initial) is currently not used during estimation and can be None
    # Lower & upper bound (lb, ub) are only used during global mode search and therefor essential, but not during sampling
    # dist_type (distribution type) can be uniform, normal, gamma, beta, inv_gamma and inv_gamma_dynare (the exact copy of what dynare does to the inverse gamma distribution).
    # uniform distribution takes lower & upper as input
    # inv_gamma_dynare function takes weird stuff as input
    # all other function take mean & std as input
    theta   : [0.7813, 0.2, 0.95, beta, 0.5, 0.10]
    sigma   : [1.2312, 0.25, 3, normal,1.50, 0.375]
    phi_pi  : [1.7985, 1.0, 3, normal,1.5, 0.25]
    phi_y   : [0.0893, 0.001, 0.5, normal, 0.125, 0.05]
    rho_u   : [.7, .01, .9999, beta, 0.5, 0.20]
    rho_r   : [.7, .01, .9999, beta, 0.5, 0.20]
    rho_z   : [.7, .01, .9999, beta, 0.5, 0.20]
    rho     : [0.8, 0.5, 0.975, beta, 0.75, 0.10]
    sig_u   : [0.5, 0.025, 5, inv_gamma_dynare, 0.1, 2]
    sig_r   : [0.5, 0.01, 3, inv_gamma_dynare, 0.1, 2]
    sig_z   : [0.5, 0.01,3 , inv_gamma_dynare, 0.1, 2]
    #nub     : [0.1, 0.001, 0.9, normal, 0.25, 0.05]

